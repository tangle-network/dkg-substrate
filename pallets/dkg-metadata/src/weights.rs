
//! Autogenerated weights for pallet_dkg_metadata
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-26, STEPS: `20`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/dkg-standalone-node
// benchmark
// pallet
// --chain=dev
// --steps=20
// --repeat=1
// --log=warn
// --pallet=pallet-dkg-metadata
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --output=./pallets/dkg-metadata/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_dkg_metadata.
pub trait WeightInfo {
	fn set_signature_threshold() -> Weight;
	fn set_keygen_threshold() -> Weight;
	fn set_refresh_delay(n: u32, ) -> Weight;
	fn submit_public_key(n: u32, ) -> Weight;
	fn submit_next_public_key(n: u32, ) -> Weight;
	fn submit_public_key_signature() -> Weight;
	fn submit_misbehaviour_reports(n: u32, ) -> Weight;
	fn unjail() -> Weight;
	fn force_unjail_signing() -> Weight;
	fn force_unjail_keygen() -> Weight;
}

/// Weights for pallet_dkg_metadata using the Substrate node and recommended hardware.
pub struct WebbWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for WebbWeight<T> {
	/// Storage: DKG NextAuthorities (r:1 w:0)
	/// Proof: DKG NextAuthorities (max_values: Some(1), max_size: Some(3302), added: 3797, mode: MaxEncodedLen)
	/// Storage: DKG PendingSignatureThreshold (r:1 w:1)
	/// Proof: DKG PendingSignatureThreshold (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	fn set_signature_threshold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3646`
		//  Estimated: `4294`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(18_000_000, 4294)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: DKG NextAuthorities (r:1 w:0)
	/// Proof: DKG NextAuthorities (max_values: Some(1), max_size: Some(3302), added: 3797, mode: MaxEncodedLen)
	/// Storage: DKG PendingSignatureThreshold (r:1 w:0)
	/// Proof: DKG PendingSignatureThreshold (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	/// Storage: DKG PendingKeygenThreshold (r:1 w:1)
	/// Proof: DKG PendingKeygenThreshold (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	fn set_keygen_threshold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3685`
		//  Estimated: `4791`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(20_000_000, 4791)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: DKG RefreshDelay (r:0 w:1)
	/// Proof: DKG RefreshDelay (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 100]`.
	fn set_refresh_delay(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_673_622, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: DKG DKGPublicKey (r:1 w:1)
	/// Proof: DKG DKGPublicKey (max_values: Some(1), max_size: Some(522), added: 1017, mode: MaxEncodedLen)
	/// Storage: DKG BestAuthorities (r:1 w:0)
	/// Proof: DKG BestAuthorities (max_values: Some(1), max_size: Some(3502), added: 3997, mode: MaxEncodedLen)
	/// Storage: DKG SignatureThreshold (r:1 w:0)
	/// Proof: DKG SignatureThreshold (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	/// Storage: DKG AuthoritySetId (r:1 w:0)
	/// Proof: DKG AuthoritySetId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: DKG AuthorityReputations (r:51 w:51)
	/// Proof: DKG AuthorityReputations (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: DKG NextUnsignedAt (r:0 w:1)
	/// Proof: DKG NextUnsignedAt (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[4, 100]`.
	fn submit_public_key(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `439 + n * (17 ±0)`
		//  Estimated: `7893 + n * (1272 ±5)`
		// Minimum execution time: 437_000_000 picoseconds.
		Weight::from_parts(437_000_000, 7893)
			// Standard Error: 62_705_278
			.saturating_add(Weight::from_parts(1_037_775_494, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 1272).saturating_mul(n.into()))
	}
	/// Storage: DKG NextDKGPublicKey (r:1 w:1)
	/// Proof: DKG NextDKGPublicKey (max_values: Some(1), max_size: Some(522), added: 1017, mode: MaxEncodedLen)
	/// Storage: DKG NextBestAuthorities (r:1 w:0)
	/// Proof: DKG NextBestAuthorities (max_values: Some(1), max_size: Some(3502), added: 3997, mode: MaxEncodedLen)
	/// Storage: DKG NextSignatureThreshold (r:1 w:0)
	/// Proof: DKG NextSignatureThreshold (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	/// Storage: DKG NextAuthoritySetId (r:1 w:0)
	/// Proof: DKG NextAuthoritySetId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: DKG NextUnsignedAt (r:0 w:1)
	/// Proof: DKG NextUnsignedAt (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: DKG RefreshInProgress (r:0 w:1)
	/// Proof: DKG RefreshInProgress (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// The range of component `n` is `[3, 100]`.
	fn submit_next_public_key(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `419 + n * (17 ±0)`
		//  Estimated: `6014`
		// Minimum execution time: 264_000_000 picoseconds.
		Weight::from_parts(264_000_000, 6014)
			// Standard Error: 69_119_069
			.saturating_add(Weight::from_parts(1_088_964_397, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DKG NextDKGPublicKey (r:1 w:0)
	/// Proof: DKG NextDKGPublicKey (max_values: Some(1), max_size: Some(522), added: 1017, mode: MaxEncodedLen)
	/// Storage: DKG NextPublicKeySignature (r:1 w:1)
	/// Proof: DKG NextPublicKeySignature (max_values: Some(1), max_size: Some(514), added: 1009, mode: MaxEncodedLen)
	/// Storage: DKG UsedSignatures (r:1 w:0)
	/// Proof: DKG UsedSignatures (max_values: Some(1), max_size: Some(263170), added: 263665, mode: MaxEncodedLen)
	/// Storage: DKG RefreshNonce (r:1 w:0)
	/// Proof: DKG RefreshNonce (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: DKG DKGPublicKey (r:1 w:0)
	/// Proof: DKG DKGPublicKey (max_values: Some(1), max_size: Some(522), added: 1017, mode: MaxEncodedLen)
	/// Storage: DKGProposalHandler UnsignedProposalQueue (r:2 w:1)
	/// Proof: DKGProposalHandler UnsignedProposalQueue (max_values: None, max_size: Some(20052), added: 22527, mode: MaxEncodedLen)
	/// Storage: DKG NextUnsignedAt (r:0 w:1)
	/// Proof: DKG NextUnsignedAt (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn submit_public_key_signature() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `729`
		//  Estimated: `312261`
		// Minimum execution time: 90_000_000 picoseconds.
		Weight::from_parts(90_000_000, 312261)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DKG NextAuthorities (r:1 w:0)
	/// Proof: DKG NextAuthorities (max_values: Some(1), max_size: Some(3302), added: 3797, mode: MaxEncodedLen)
	/// Storage: DKG NextSignatureThreshold (r:1 w:0)
	/// Proof: DKG NextSignatureThreshold (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	/// Storage: DKG AuthorityReputations (r:7 w:1)
	/// Proof: DKG AuthorityReputations (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: DKG NextBestAuthorities (r:1 w:1)
	/// Proof: DKG NextBestAuthorities (max_values: Some(1), max_size: Some(3502), added: 3997, mode: MaxEncodedLen)
	/// Storage: DKG JailedKeygenAuthorities (r:6 w:0)
	/// Proof: DKG JailedKeygenAuthorities (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: DKG NextKeygenThreshold (r:1 w:0)
	/// Proof: DKG NextKeygenThreshold (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	/// Storage: DKG NextUnsignedAt (r:0 w:1)
	/// Proof: DKG NextUnsignedAt (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[3, 100]`.
	fn submit_misbehaviour_reports(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `673 + n * (33 ±0)`
		//  Estimated: `41634`
		// Minimum execution time: 293_000_000 picoseconds.
		Weight::from_parts(293_000_000, 41634)
			// Standard Error: 79_726_837
			.saturating_add(Weight::from_parts(1_399_466_798, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(17_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: DKG AccountToAuthority (r:1 w:0)
	/// Proof: DKG AccountToAuthority (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: DKG JailedKeygenAuthorities (r:1 w:1)
	/// Proof: DKG JailedKeygenAuthorities (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: DKG JailedSigningAuthorities (r:1 w:1)
	/// Proof: DKG JailedSigningAuthorities (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	fn unjail() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2484`
		//  Estimated: `7562`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(26_000_000, 7562)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: DKG JailedSigningAuthorities (r:0 w:1)
	/// Proof: DKG JailedSigningAuthorities (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	fn force_unjail_signing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: DKG JailedKeygenAuthorities (r:0 w:1)
	/// Proof: DKG JailedKeygenAuthorities (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	fn force_unjail_keygen() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: DKG NextAuthorities (r:1 w:0)
	/// Proof: DKG NextAuthorities (max_values: Some(1), max_size: Some(3302), added: 3797, mode: MaxEncodedLen)
	/// Storage: DKG PendingSignatureThreshold (r:1 w:1)
	/// Proof: DKG PendingSignatureThreshold (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	fn set_signature_threshold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3646`
		//  Estimated: `4294`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(18_000_000, 4294)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: DKG NextAuthorities (r:1 w:0)
	/// Proof: DKG NextAuthorities (max_values: Some(1), max_size: Some(3302), added: 3797, mode: MaxEncodedLen)
	/// Storage: DKG PendingSignatureThreshold (r:1 w:0)
	/// Proof: DKG PendingSignatureThreshold (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	/// Storage: DKG PendingKeygenThreshold (r:1 w:1)
	/// Proof: DKG PendingKeygenThreshold (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	fn set_keygen_threshold() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3685`
		//  Estimated: `4791`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(20_000_000, 4791)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: DKG RefreshDelay (r:0 w:1)
	/// Proof: DKG RefreshDelay (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 100]`.
	fn set_refresh_delay(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_673_622, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: DKG DKGPublicKey (r:1 w:1)
	/// Proof: DKG DKGPublicKey (max_values: Some(1), max_size: Some(522), added: 1017, mode: MaxEncodedLen)
	/// Storage: DKG BestAuthorities (r:1 w:0)
	/// Proof: DKG BestAuthorities (max_values: Some(1), max_size: Some(3502), added: 3997, mode: MaxEncodedLen)
	/// Storage: DKG SignatureThreshold (r:1 w:0)
	/// Proof: DKG SignatureThreshold (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	/// Storage: DKG AuthoritySetId (r:1 w:0)
	/// Proof: DKG AuthoritySetId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: DKG AuthorityReputations (r:51 w:51)
	/// Proof: DKG AuthorityReputations (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: DKG NextUnsignedAt (r:0 w:1)
	/// Proof: DKG NextUnsignedAt (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[4, 100]`.
	fn submit_public_key(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `439 + n * (17 ±0)`
		//  Estimated: `7893 + n * (1272 ±5)`
		// Minimum execution time: 437_000_000 picoseconds.
		Weight::from_parts(437_000_000, 7893)
			// Standard Error: 62_705_278
			.saturating_add(Weight::from_parts(1_037_775_494, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 1272).saturating_mul(n.into()))
	}
	/// Storage: DKG NextDKGPublicKey (r:1 w:1)
	/// Proof: DKG NextDKGPublicKey (max_values: Some(1), max_size: Some(522), added: 1017, mode: MaxEncodedLen)
	/// Storage: DKG NextBestAuthorities (r:1 w:0)
	/// Proof: DKG NextBestAuthorities (max_values: Some(1), max_size: Some(3502), added: 3997, mode: MaxEncodedLen)
	/// Storage: DKG NextSignatureThreshold (r:1 w:0)
	/// Proof: DKG NextSignatureThreshold (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	/// Storage: DKG NextAuthoritySetId (r:1 w:0)
	/// Proof: DKG NextAuthoritySetId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: DKG NextUnsignedAt (r:0 w:1)
	/// Proof: DKG NextUnsignedAt (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: DKG RefreshInProgress (r:0 w:1)
	/// Proof: DKG RefreshInProgress (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// The range of component `n` is `[3, 100]`.
	fn submit_next_public_key(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `419 + n * (17 ±0)`
		//  Estimated: `6014`
		// Minimum execution time: 264_000_000 picoseconds.
		Weight::from_parts(264_000_000, 6014)
			// Standard Error: 69_119_069
			.saturating_add(Weight::from_parts(1_088_964_397, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: DKG NextDKGPublicKey (r:1 w:0)
	/// Proof: DKG NextDKGPublicKey (max_values: Some(1), max_size: Some(522), added: 1017, mode: MaxEncodedLen)
	/// Storage: DKG NextPublicKeySignature (r:1 w:1)
	/// Proof: DKG NextPublicKeySignature (max_values: Some(1), max_size: Some(514), added: 1009, mode: MaxEncodedLen)
	/// Storage: DKG UsedSignatures (r:1 w:0)
	/// Proof: DKG UsedSignatures (max_values: Some(1), max_size: Some(263170), added: 263665, mode: MaxEncodedLen)
	/// Storage: DKG RefreshNonce (r:1 w:0)
	/// Proof: DKG RefreshNonce (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: DKG DKGPublicKey (r:1 w:0)
	/// Proof: DKG DKGPublicKey (max_values: Some(1), max_size: Some(522), added: 1017, mode: MaxEncodedLen)
	/// Storage: DKGProposalHandler UnsignedProposalQueue (r:2 w:1)
	/// Proof: DKGProposalHandler UnsignedProposalQueue (max_values: None, max_size: Some(20052), added: 22527, mode: MaxEncodedLen)
	/// Storage: DKG NextUnsignedAt (r:0 w:1)
	/// Proof: DKG NextUnsignedAt (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn submit_public_key_signature() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `729`
		//  Estimated: `312261`
		// Minimum execution time: 90_000_000 picoseconds.
		Weight::from_parts(90_000_000, 312261)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: DKG NextAuthorities (r:1 w:0)
	/// Proof: DKG NextAuthorities (max_values: Some(1), max_size: Some(3302), added: 3797, mode: MaxEncodedLen)
	/// Storage: DKG NextSignatureThreshold (r:1 w:0)
	/// Proof: DKG NextSignatureThreshold (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	/// Storage: DKG AuthorityReputations (r:7 w:1)
	/// Proof: DKG AuthorityReputations (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: DKG NextBestAuthorities (r:1 w:1)
	/// Proof: DKG NextBestAuthorities (max_values: Some(1), max_size: Some(3502), added: 3997, mode: MaxEncodedLen)
	/// Storage: DKG JailedKeygenAuthorities (r:6 w:0)
	/// Proof: DKG JailedKeygenAuthorities (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: DKG NextKeygenThreshold (r:1 w:0)
	/// Proof: DKG NextKeygenThreshold (max_values: Some(1), max_size: Some(2), added: 497, mode: MaxEncodedLen)
	/// Storage: DKG NextUnsignedAt (r:0 w:1)
	/// Proof: DKG NextUnsignedAt (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[3, 100]`.
	fn submit_misbehaviour_reports(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `673 + n * (33 ±0)`
		//  Estimated: `41634`
		// Minimum execution time: 293_000_000 picoseconds.
		Weight::from_parts(293_000_000, 41634)
			// Standard Error: 79_726_837
			.saturating_add(Weight::from_parts(1_399_466_798, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(17_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: DKG AccountToAuthority (r:1 w:0)
	/// Proof: DKG AccountToAuthority (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: DKG JailedKeygenAuthorities (r:1 w:1)
	/// Proof: DKG JailedKeygenAuthorities (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: DKG JailedSigningAuthorities (r:1 w:1)
	/// Proof: DKG JailedSigningAuthorities (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	fn unjail() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2484`
		//  Estimated: `7562`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(26_000_000, 7562)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: DKG JailedSigningAuthorities (r:0 w:1)
	/// Proof: DKG JailedSigningAuthorities (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	fn force_unjail_signing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: DKG JailedKeygenAuthorities (r:0 w:1)
	/// Proof: DKG JailedKeygenAuthorities (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	fn force_unjail_keygen() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(10_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
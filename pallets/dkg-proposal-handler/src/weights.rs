// Copyright 2022 Webb Technologies Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

//! Autogenerated weights for `pallet_dkg_proposal_handler`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-12-21, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/dkg-standalone-node
// benchmark
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_dkg_proposal_handler
// --extrinsic
// *
// --steps
// 50
// --repeat
// 10
// --raw
// --output
// ./pallets/dkg-proposal-handler/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn submit_signed_proposals(n: u32) -> Weight;
	fn force_submit_unsigned_proposal() -> Weight;
}
/// Weight functions for `pallet_dkg_proposal_handler`.
pub struct WebbWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for WebbWeight<T> {
	// Storage: DKG DKGPublicKey (r:1 w:0)
	// Storage: DKGProposalHandler UnsignedProposalQueue (r:2 w:2)
	// Storage: DKGProposalHandler SignedProposals (r:0 w:2)
	fn submit_signed_proposals(n: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_837_000
			.saturating_add((555_171_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
	}
	// Storage: DKGProposalHandler UnsignedProposalQueue (r:0 w:1)
	fn force_submit_unsigned_proposal() -> Weight {
		(8_866_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

impl WeightInfo for () {
	fn submit_signed_proposals(_n: u32, ) -> Weight {
		0
	}

	fn force_submit_unsigned_proposal() -> Weight {
		0
	}
}
